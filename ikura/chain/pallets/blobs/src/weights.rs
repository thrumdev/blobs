
//! Autogenerated weights for `pallet_ikura_blobs`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-15, STEPS: `2`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `gab`, CPU: `Intel(R) Core(TM) i5-8350U CPU @ 1.70GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/ikura-node
// benchmark
// pallet
// --dev
// --pallet
// pallet_ikura_blobs
// --extrinsic
// *
// --steps
// 2
// --repeat
// 2
// --template
// ../frame-weight-template.hbs
// --output
// ikura-chain/pallets/blobs/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_ikura_blobs`.
pub trait WeightInfo {
	fn submit_blob(x: u32, y: u32, ) -> Weight;
	fn on_finalize(x: u32, ) -> Weight;
}

/// Weights for `pallet_ikura_blobs` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `x` is `[0, 102399]`.
	/// The range of component `y` is `[1, 102400]`.
	fn submit_blob(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 578_218_000 picoseconds.
		Weight::from_parts(110_190_877, 0)
			// Standard Error: 1_598
			.saturating_add(Weight::from_parts(81_664, 0).saturating_mul(x.into()))
			// Standard Error: 1_598
			.saturating_add(Weight::from_parts(4_622, 0).saturating_mul(y.into()))
	}
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 102400]`.
	fn on_finalize(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 4_630_000 picoseconds.
		Weight::from_parts(7_487_999, 1485)
			// Standard Error: 24_984
			.saturating_add(Weight::from_parts(4_045_933, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// The range of component `x` is `[0, 102399]`.
	/// The range of component `y` is `[1, 102400]`.
	fn submit_blob(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 578_218_000 picoseconds.
		Weight::from_parts(110_190_877, 0)
			// Standard Error: 1_598
			.saturating_add(Weight::from_parts(81_664, 0).saturating_mul(x.into()))
			// Standard Error: 1_598
			.saturating_add(Weight::from_parts(4_622, 0).saturating_mul(y.into()))
	}
	/// Storage: `System::Digest` (r:1 w:1)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 102400]`.
	fn on_finalize(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 4_630_000 picoseconds.
		Weight::from_parts(7_487_999, 1485)
			// Standard Error: 24_984
			.saturating_add(Weight::from_parts(4_045_933, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
